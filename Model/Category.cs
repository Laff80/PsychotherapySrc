//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class Category
    {
        #region Primitive Properties
    
        public virtual int CategoryID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual int ParentCategoryID
        {
            get;
            set;
        }
    
        public virtual int OwnedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TimeCreated
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastModified
        {
            get;
            set;
        }
    
        public virtual int LastModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool IsValid
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<UserCategoryPermission> UserCategoryPermissions
        {
            get
            {
                if (_userCategoryPermissions == null)
                {
                    var newCollection = new FixupCollection<UserCategoryPermission>();
                    newCollection.CollectionChanged += FixupUserCategoryPermissions;
                    _userCategoryPermissions = newCollection;
                }
                return _userCategoryPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userCategoryPermissions, value))
                {
                    var previousValue = _userCategoryPermissions as FixupCollection<UserCategoryPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserCategoryPermissions;
                    }
                    _userCategoryPermissions = value;
                    var newValue = value as FixupCollection<UserCategoryPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserCategoryPermissions;
                    }
                }
            }
        }
        private ICollection<UserCategoryPermission> _userCategoryPermissions;
    
        public virtual ICollection<Form> Forms
        {
            get
            {
                if (_forms == null)
                {
                    var newCollection = new FixupCollection<Form>();
                    newCollection.CollectionChanged += FixupForms;
                    _forms = newCollection;
                }
                return _forms;
            }
            set
            {
                if (!ReferenceEquals(_forms, value))
                {
                    var previousValue = _forms as FixupCollection<Form>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupForms;
                    }
                    _forms = value;
                    var newValue = value as FixupCollection<Form>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupForms;
                    }
                }
            }
        }
        private ICollection<Form> _forms;

        #endregion
        #region Association Fixup
    
        private void FixupUserCategoryPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserCategoryPermission item in e.NewItems)
                {
                    item.Category = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCategoryPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.Category, this))
                    {
                        item.Category = null;
                    }
                }
            }
        }
    
        private void FixupForms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Form item in e.NewItems)
                {
                    if (!item.Categories.Contains(this))
                    {
                        item.Categories.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Form item in e.OldItems)
                {
                    if (item.Categories.Contains(this))
                    {
                        item.Categories.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
