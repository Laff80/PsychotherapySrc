//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class ClinicalService
    {
        #region Primitive Properties
    
        public virtual Nullable<int> TreatmentPlanID
        {
            get { return _treatmentPlanID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_treatmentPlanID != value)
                    {
                        if (TreatmentPlan != null && TreatmentPlan.TreatmentPlanID != value)
                        {
                            TreatmentPlan = null;
                        }
                        _treatmentPlanID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _treatmentPlanID;
    
        public virtual int ClinicalServiceID
        {
            get;
            set;
        }
    
        public virtual string Mood
        {
            get;
            set;
        }
    
        public virtual string Affect
        {
            get;
            set;
        }
    
        public virtual string Participat
        {
            get;
            set;
        }
    
        public virtual string ThoughtProcesses
        {
            get;
            set;
        }
    
        public virtual string Speech
        {
            get;
            set;
        }
    
        public virtual string Perceptions
        {
            get;
            set;
        }
    
        public virtual string Sleep
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastModifiedTime
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsValid
        {
            get;
            set;
        }
    
        public virtual string Prof
        {
            get;
            set;
        }
    
        public virtual string ProfName
        {
            get;
            set;
        }
    
        public virtual string CostCenter
        {
            get;
            set;
        }
    
        public virtual string GRID
        {
            get;
            set;
        }
    
        public virtual string ClientName
        {
            get;
            set;
        }
    
        public virtual string ScheduledService
        {
            get;
            set;
        }
    
        public virtual string Comments
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ClinicalServiceDiagnosi> ClinicalServiceDiagnosis
        {
            get
            {
                if (_clinicalServiceDiagnosis == null)
                {
                    var newCollection = new FixupCollection<ClinicalServiceDiagnosi>();
                    newCollection.CollectionChanged += FixupClinicalServiceDiagnosis;
                    _clinicalServiceDiagnosis = newCollection;
                }
                return _clinicalServiceDiagnosis;
            }
            set
            {
                if (!ReferenceEquals(_clinicalServiceDiagnosis, value))
                {
                    var previousValue = _clinicalServiceDiagnosis as FixupCollection<ClinicalServiceDiagnosi>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClinicalServiceDiagnosis;
                    }
                    _clinicalServiceDiagnosis = value;
                    var newValue = value as FixupCollection<ClinicalServiceDiagnosi>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClinicalServiceDiagnosis;
                    }
                }
            }
        }
        private ICollection<ClinicalServiceDiagnosi> _clinicalServiceDiagnosis;
    
        public virtual TreatmentPlan TreatmentPlan
        {
            get { return _treatmentPlan; }
            set
            {
                if (!ReferenceEquals(_treatmentPlan, value))
                {
                    var previousValue = _treatmentPlan;
                    _treatmentPlan = value;
                    FixupTreatmentPlan(previousValue);
                }
            }
        }
        private TreatmentPlan _treatmentPlan;
    
        public virtual ICollection<ClinicalServiceNoteRate> ClinicalServiceNoteRates
        {
            get
            {
                if (_clinicalServiceNoteRates == null)
                {
                    var newCollection = new FixupCollection<ClinicalServiceNoteRate>();
                    newCollection.CollectionChanged += FixupClinicalServiceNoteRates;
                    _clinicalServiceNoteRates = newCollection;
                }
                return _clinicalServiceNoteRates;
            }
            set
            {
                if (!ReferenceEquals(_clinicalServiceNoteRates, value))
                {
                    var previousValue = _clinicalServiceNoteRates as FixupCollection<ClinicalServiceNoteRate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClinicalServiceNoteRates;
                    }
                    _clinicalServiceNoteRates = value;
                    var newValue = value as FixupCollection<ClinicalServiceNoteRate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClinicalServiceNoteRates;
                    }
                }
            }
        }
        private ICollection<ClinicalServiceNoteRate> _clinicalServiceNoteRates;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupTreatmentPlan(TreatmentPlan previousValue)
        {
            if (previousValue != null && previousValue.ClinicalServices.Contains(this))
            {
                previousValue.ClinicalServices.Remove(this);
            }
    
            if (TreatmentPlan != null)
            {
                if (!TreatmentPlan.ClinicalServices.Contains(this))
                {
                    TreatmentPlan.ClinicalServices.Add(this);
                }
                if (TreatmentPlanID != TreatmentPlan.TreatmentPlanID)
                {
                    TreatmentPlanID = TreatmentPlan.TreatmentPlanID;
                }
            }
            else if (!_settingFK)
            {
                TreatmentPlanID = null;
            }
        }
    
        private void FixupClinicalServiceDiagnosis(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClinicalServiceDiagnosi item in e.NewItems)
                {
                    item.ClinicalService = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClinicalServiceDiagnosi item in e.OldItems)
                {
                    if (ReferenceEquals(item.ClinicalService, this))
                    {
                        item.ClinicalService = null;
                    }
                }
            }
        }
    
        private void FixupClinicalServiceNoteRates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ClinicalServiceNoteRate item in e.NewItems)
                {
                    item.ClinicalService = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ClinicalServiceNoteRate item in e.OldItems)
                {
                    if (ReferenceEquals(item.ClinicalService, this))
                    {
                        item.ClinicalService = null;
                    }
                }
            }
        }

        #endregion
    }
}
