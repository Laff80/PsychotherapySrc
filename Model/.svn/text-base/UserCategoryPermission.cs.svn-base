//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class UserCategoryPermission
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (User != null && User.UserID != value)
                    {
                        User = null;
                    }
                    _userID = value;
                }
            }
        }
        private int _userID;
    
        public virtual int CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    if (Category != null && Category.CategoryID != value)
                    {
                        Category = null;
                    }
                    _categoryID = value;
                }
            }
        }
        private int _categoryID;
    
        public virtual bool can_read
        {
            get;
            set;
        }
    
        public virtual bool can_write
        {
            get;
            set;
        }
    
        public virtual bool can_remove
        {
            get;
            set;
        }
    
        public virtual bool can_download
        {
            get;
            set;
        }
    
        public virtual bool can_annotate
        {
            get;
            set;
        }
    
        public virtual bool can_upload
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> time_created
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> last_modified
        {
            get;
            set;
        }
    
        public virtual int last_modified_by
        {
            get;
            set;
        }
    
        public virtual bool is_valid
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                }
            }
        }
        private Category _category;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion
        #region Association Fixup
    
        private void FixupCategory(Category previousValue)
        {
            if (previousValue != null && previousValue.UserCategoryPermissions.Contains(this))
            {
                previousValue.UserCategoryPermissions.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.UserCategoryPermissions.Contains(this))
                {
                    Category.UserCategoryPermissions.Add(this);
                }
                if (CategoryID != Category.CategoryID)
                {
                    CategoryID = Category.CategoryID;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.UserCategoryPermissions.Contains(this))
            {
                previousValue.UserCategoryPermissions.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.UserCategoryPermissions.Contains(this))
                {
                    User.UserCategoryPermissions.Add(this);
                }
                if (UserID != User.UserID)
                {
                    UserID = User.UserID;
                }
            }
        }

        #endregion
    }
}
