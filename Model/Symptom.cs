//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class Symptom
    {
        #region Primitive Properties
    
        public virtual int SymptomID
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsValid
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastModifiedTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<LongTermGoal> LongTermGoals
        {
            get
            {
                if (_longTermGoals == null)
                {
                    var newCollection = new FixupCollection<LongTermGoal>();
                    newCollection.CollectionChanged += FixupLongTermGoals;
                    _longTermGoals = newCollection;
                }
                return _longTermGoals;
            }
            set
            {
                if (!ReferenceEquals(_longTermGoals, value))
                {
                    var previousValue = _longTermGoals as FixupCollection<LongTermGoal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLongTermGoals;
                    }
                    _longTermGoals = value;
                    var newValue = value as FixupCollection<LongTermGoal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLongTermGoals;
                    }
                }
            }
        }
        private ICollection<LongTermGoal> _longTermGoals;
    
        public virtual ICollection<Cluster> Clusters
        {
            get
            {
                if (_clusters == null)
                {
                    var newCollection = new FixupCollection<Cluster>();
                    newCollection.CollectionChanged += FixupClusters;
                    _clusters = newCollection;
                }
                return _clusters;
            }
            set
            {
                if (!ReferenceEquals(_clusters, value))
                {
                    var previousValue = _clusters as FixupCollection<Cluster>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClusters;
                    }
                    _clusters = value;
                    var newValue = value as FixupCollection<Cluster>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClusters;
                    }
                }
            }
        }
        private ICollection<Cluster> _clusters;

        #endregion
        #region Association Fixup
    
        private void FixupLongTermGoals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LongTermGoal item in e.NewItems)
                {
                    if (!item.Symptoms.Contains(this))
                    {
                        item.Symptoms.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LongTermGoal item in e.OldItems)
                {
                    if (item.Symptoms.Contains(this))
                    {
                        item.Symptoms.Remove(this);
                    }
                }
            }
        }
    
        private void FixupClusters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Cluster item in e.NewItems)
                {
                    if (!item.Symptoms.Contains(this))
                    {
                        item.Symptoms.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cluster item in e.OldItems)
                {
                    if (item.Symptoms.Contains(this))
                    {
                        item.Symptoms.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
