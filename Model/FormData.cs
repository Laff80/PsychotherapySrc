//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class FormData
    {
        #region Primitive Properties
    
        public virtual int FormDataID
        {
            get;
            set;
        }
    
        public virtual int FormID
        {
            get { return _formID; }
            set
            {
                if (_formID != value)
                {
                    if (Form != null && Form.FormID != value)
                    {
                        Form = null;
                    }
                    _formID = value;
                }
            }
        }
        private int _formID;
    
        public virtual string Content
        {
            get;
            set;
        }
    
        public virtual string PrintFormName
        {
            get;
            set;
        }
    
        public virtual Nullable<int> PatientID
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UserID
        {
            get;
            set;
        }
    
        public virtual System.DateTime TimeCreated
        {
            get;
            set;
        }
    
        public virtual System.DateTime LastModified
        {
            get;
            set;
        }
    
        public virtual int LastModifiedBy
        {
            get;
            set;
        }
    
        public virtual bool IsValid
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Form Form
        {
            get { return _form; }
            set
            {
                if (!ReferenceEquals(_form, value))
                {
                    var previousValue = _form;
                    _form = value;
                    FixupForm(previousValue);
                }
            }
        }
        private Form _form;
    
        public virtual ICollection<UserFormDataPermission> UserFormDataPermissions
        {
            get
            {
                if (_userFormDataPermissions == null)
                {
                    var newCollection = new FixupCollection<UserFormDataPermission>();
                    newCollection.CollectionChanged += FixupUserFormDataPermissions;
                    _userFormDataPermissions = newCollection;
                }
                return _userFormDataPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userFormDataPermissions, value))
                {
                    var previousValue = _userFormDataPermissions as FixupCollection<UserFormDataPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserFormDataPermissions;
                    }
                    _userFormDataPermissions = value;
                    var newValue = value as FixupCollection<UserFormDataPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserFormDataPermissions;
                    }
                }
            }
        }
        private ICollection<UserFormDataPermission> _userFormDataPermissions;

        #endregion
        #region Association Fixup
    
        private void FixupForm(Form previousValue)
        {
            if (previousValue != null && previousValue.FormDatas.Contains(this))
            {
                previousValue.FormDatas.Remove(this);
            }
    
            if (Form != null)
            {
                if (!Form.FormDatas.Contains(this))
                {
                    Form.FormDatas.Add(this);
                }
                if (FormID != Form.FormID)
                {
                    FormID = Form.FormID;
                }
            }
        }
    
        private void FixupUserFormDataPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserFormDataPermission item in e.NewItems)
                {
                    item.FormData = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserFormDataPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.FormData, this))
                    {
                        item.FormData = null;
                    }
                }
            }
        }

        #endregion
    }
}
