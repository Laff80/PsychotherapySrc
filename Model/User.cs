//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual int UserID
        {
            get;
            set;
        }
    
        public virtual string EmployeeNumber
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string MiddleName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string UserName
        {
            get;
            set;
        }
    
        public virtual string Password
        {
            get;
            set;
        }
    
        public virtual string PrimaryEmail
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Profession
        {
            get;
            set;
        }
    
        public virtual string UserLocation
        {
            get;
            set;
        }
    
        public virtual string SecretQuestion
        {
            get;
            set;
        }
    
        public virtual string SecretAnswer
        {
            get;
            set;
        }
    
        public virtual short IsActive
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UserTypeID
        {
            get { return _userTypeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userTypeID != value)
                    {
                        if (UserType != null && UserType.UserTypeID != value)
                        {
                            UserType = null;
                        }
                        _userTypeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _userTypeID;
    
        public virtual Nullable<int> DefaultSiteID
        {
            get;
            set;
        }
    
        public virtual bool IsValid
        {
            get;
            set;
        }
    
        public virtual System.DateTime TimeCreated
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastModified
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LastModifiedBy
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Contact> Contacts
        {
            get
            {
                if (_contacts == null)
                {
                    var newCollection = new FixupCollection<Contact>();
                    newCollection.CollectionChanged += FixupContacts;
                    _contacts = newCollection;
                }
                return _contacts;
            }
            set
            {
                if (!ReferenceEquals(_contacts, value))
                {
                    var previousValue = _contacts as FixupCollection<Contact>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContacts;
                    }
                    _contacts = value;
                    var newValue = value as FixupCollection<Contact>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContacts;
                    }
                }
            }
        }
        private ICollection<Contact> _contacts;
    
        public virtual ICollection<Patient> Patients
        {
            get
            {
                if (_patients == null)
                {
                    var newCollection = new FixupCollection<Patient>();
                    newCollection.CollectionChanged += FixupPatients;
                    _patients = newCollection;
                }
                return _patients;
            }
            set
            {
                if (!ReferenceEquals(_patients, value))
                {
                    var previousValue = _patients as FixupCollection<Patient>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPatients;
                    }
                    _patients = value;
                    var newValue = value as FixupCollection<Patient>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPatients;
                    }
                }
            }
        }
        private ICollection<Patient> _patients;
    
        public virtual ICollection<SiteDepartmentUser> SiteDepartmentUsers
        {
            get
            {
                if (_siteDepartmentUsers == null)
                {
                    var newCollection = new FixupCollection<SiteDepartmentUser>();
                    newCollection.CollectionChanged += FixupSiteDepartmentUsers;
                    _siteDepartmentUsers = newCollection;
                }
                return _siteDepartmentUsers;
            }
            set
            {
                if (!ReferenceEquals(_siteDepartmentUsers, value))
                {
                    var previousValue = _siteDepartmentUsers as FixupCollection<SiteDepartmentUser>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSiteDepartmentUsers;
                    }
                    _siteDepartmentUsers = value;
                    var newValue = value as FixupCollection<SiteDepartmentUser>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSiteDepartmentUsers;
                    }
                }
            }
        }
        private ICollection<SiteDepartmentUser> _siteDepartmentUsers;
    
        public virtual ICollection<UserCategoryPermission> UserCategoryPermissions
        {
            get
            {
                if (_userCategoryPermissions == null)
                {
                    var newCollection = new FixupCollection<UserCategoryPermission>();
                    newCollection.CollectionChanged += FixupUserCategoryPermissions;
                    _userCategoryPermissions = newCollection;
                }
                return _userCategoryPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userCategoryPermissions, value))
                {
                    var previousValue = _userCategoryPermissions as FixupCollection<UserCategoryPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserCategoryPermissions;
                    }
                    _userCategoryPermissions = value;
                    var newValue = value as FixupCollection<UserCategoryPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserCategoryPermissions;
                    }
                }
            }
        }
        private ICollection<UserCategoryPermission> _userCategoryPermissions;
    
        public virtual ICollection<UserFilePermission> UserFilePermissions
        {
            get
            {
                if (_userFilePermissions == null)
                {
                    var newCollection = new FixupCollection<UserFilePermission>();
                    newCollection.CollectionChanged += FixupUserFilePermissions;
                    _userFilePermissions = newCollection;
                }
                return _userFilePermissions;
            }
            set
            {
                if (!ReferenceEquals(_userFilePermissions, value))
                {
                    var previousValue = _userFilePermissions as FixupCollection<UserFilePermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserFilePermissions;
                    }
                    _userFilePermissions = value;
                    var newValue = value as FixupCollection<UserFilePermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserFilePermissions;
                    }
                }
            }
        }
        private ICollection<UserFilePermission> _userFilePermissions;
    
        public virtual ICollection<UserFormDataPermission> UserFormDataPermissions
        {
            get
            {
                if (_userFormDataPermissions == null)
                {
                    var newCollection = new FixupCollection<UserFormDataPermission>();
                    newCollection.CollectionChanged += FixupUserFormDataPermissions;
                    _userFormDataPermissions = newCollection;
                }
                return _userFormDataPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userFormDataPermissions, value))
                {
                    var previousValue = _userFormDataPermissions as FixupCollection<UserFormDataPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserFormDataPermissions;
                    }
                    _userFormDataPermissions = value;
                    var newValue = value as FixupCollection<UserFormDataPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserFormDataPermissions;
                    }
                }
            }
        }
        private ICollection<UserFormDataPermission> _userFormDataPermissions;
    
        public virtual ICollection<UserPatientPermission> UserPatientPermissions
        {
            get
            {
                if (_userPatientPermissions == null)
                {
                    var newCollection = new FixupCollection<UserPatientPermission>();
                    newCollection.CollectionChanged += FixupUserPatientPermissions;
                    _userPatientPermissions = newCollection;
                }
                return _userPatientPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userPatientPermissions, value))
                {
                    var previousValue = _userPatientPermissions as FixupCollection<UserPatientPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserPatientPermissions;
                    }
                    _userPatientPermissions = value;
                    var newValue = value as FixupCollection<UserPatientPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserPatientPermissions;
                    }
                }
            }
        }
        private ICollection<UserPatientPermission> _userPatientPermissions;
    
        public virtual UserType UserType
        {
            get { return _userType; }
            set
            {
                if (!ReferenceEquals(_userType, value))
                {
                    var previousValue = _userType;
                    _userType = value;
                    FixupUserType(previousValue);
                }
            }
        }
        private UserType _userType;
    
        public virtual ICollection<UserTreatmentPlanPermission> UserTreatmentPlanPermissions
        {
            get
            {
                if (_userTreatmentPlanPermissions == null)
                {
                    var newCollection = new FixupCollection<UserTreatmentPlanPermission>();
                    newCollection.CollectionChanged += FixupUserTreatmentPlanPermissions;
                    _userTreatmentPlanPermissions = newCollection;
                }
                return _userTreatmentPlanPermissions;
            }
            set
            {
                if (!ReferenceEquals(_userTreatmentPlanPermissions, value))
                {
                    var previousValue = _userTreatmentPlanPermissions as FixupCollection<UserTreatmentPlanPermission>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserTreatmentPlanPermissions;
                    }
                    _userTreatmentPlanPermissions = value;
                    var newValue = value as FixupCollection<UserTreatmentPlanPermission>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserTreatmentPlanPermissions;
                    }
                }
            }
        }
        private ICollection<UserTreatmentPlanPermission> _userTreatmentPlanPermissions;
    
        public virtual ICollection<Account> Accounts
        {
            get
            {
                if (_accounts == null)
                {
                    var newCollection = new FixupCollection<Account>();
                    newCollection.CollectionChanged += FixupAccounts;
                    _accounts = newCollection;
                }
                return _accounts;
            }
            set
            {
                if (!ReferenceEquals(_accounts, value))
                {
                    var previousValue = _accounts as FixupCollection<Account>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccounts;
                    }
                    _accounts = value;
                    var newValue = value as FixupCollection<Account>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccounts;
                    }
                }
            }
        }
        private ICollection<Account> _accounts;
    
        public virtual ICollection<SystemFunction> SystemFunctions
        {
            get
            {
                if (_systemFunctions == null)
                {
                    var newCollection = new FixupCollection<SystemFunction>();
                    newCollection.CollectionChanged += FixupSystemFunctions;
                    _systemFunctions = newCollection;
                }
                return _systemFunctions;
            }
            set
            {
                if (!ReferenceEquals(_systemFunctions, value))
                {
                    var previousValue = _systemFunctions as FixupCollection<SystemFunction>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSystemFunctions;
                    }
                    _systemFunctions = value;
                    var newValue = value as FixupCollection<SystemFunction>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSystemFunctions;
                    }
                }
            }
        }
        private ICollection<SystemFunction> _systemFunctions;
    
        public virtual ICollection<Group> Groups
        {
            get
            {
                if (_groups == null)
                {
                    var newCollection = new FixupCollection<Group>();
                    newCollection.CollectionChanged += FixupGroups;
                    _groups = newCollection;
                }
                return _groups;
            }
            set
            {
                if (!ReferenceEquals(_groups, value))
                {
                    var previousValue = _groups as FixupCollection<Group>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGroups;
                    }
                    _groups = value;
                    var newValue = value as FixupCollection<Group>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGroups;
                    }
                }
            }
        }
        private ICollection<Group> _groups;
    
        public virtual ICollection<User> Users1
        {
            get
            {
                if (_users1 == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers1;
                    _users1 = newCollection;
                }
                return _users1;
            }
            set
            {
                if (!ReferenceEquals(_users1, value))
                {
                    var previousValue = _users1 as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers1;
                    }
                    _users1 = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers1;
                    }
                }
            }
        }
        private ICollection<User> _users1;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUserType(UserType previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (UserType != null)
            {
                if (!UserType.Users.Contains(this))
                {
                    UserType.Users.Add(this);
                }
                if (UserTypeID != UserType.UserTypeID)
                {
                    UserTypeID = UserType.UserTypeID;
                }
            }
            else if (!_settingFK)
            {
                UserTypeID = null;
            }
        }
    
        private void FixupContacts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Contact item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Contact item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupPatients(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Patient item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Patient item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSiteDepartmentUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SiteDepartmentUser item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SiteDepartmentUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserCategoryPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserCategoryPermission item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserCategoryPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserFilePermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserFilePermission item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserFilePermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserFormDataPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserFormDataPermission item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserFormDataPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserPatientPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserPatientPermission item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserPatientPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserTreatmentPlanPermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserTreatmentPlanPermission item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserTreatmentPlanPermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Account item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Account item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupSystemFunctions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SystemFunction item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SystemFunction item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Group item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Group item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupUsers1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Users1.Contains(this))
                    {
                        item.Users1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Users1.Contains(this))
                    {
                        item.Users1.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
