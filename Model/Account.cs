//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class Account
    {
        #region Primitive Properties
    
        public virtual int AccountID
        {
            get;
            set;
        }
    
        public virtual int AccountPlanID
        {
            get { return _accountPlanID; }
            set
            {
                if (_accountPlanID != value)
                {
                    if (AccountPlan != null && AccountPlan.AccountPlanID != value)
                    {
                        AccountPlan = null;
                    }
                    _accountPlanID = value;
                }
            }
        }
        private int _accountPlanID;
    
        public virtual int main_account_holder
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> signedup_date
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> renewal_date
        {
            get;
            set;
        }
    
        public virtual int grace_period_in_days
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> time_created
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> last_modified
        {
            get;
            set;
        }
    
        public virtual int last_modified_by
        {
            get;
            set;
        }
    
        public virtual bool is_valid
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual AccountPlan AccountPlan
        {
            get { return _accountPlan; }
            set
            {
                if (!ReferenceEquals(_accountPlan, value))
                {
                    var previousValue = _accountPlan;
                    _accountPlan = value;
                    FixupAccountPlan(previousValue);
                }
            }
        }
        private AccountPlan _accountPlan;
    
        public virtual ICollection<UserPayment> UserPayments
        {
            get
            {
                if (_userPayments == null)
                {
                    var newCollection = new FixupCollection<UserPayment>();
                    newCollection.CollectionChanged += FixupUserPayments;
                    _userPayments = newCollection;
                }
                return _userPayments;
            }
            set
            {
                if (!ReferenceEquals(_userPayments, value))
                {
                    var previousValue = _userPayments as FixupCollection<UserPayment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserPayments;
                    }
                    _userPayments = value;
                    var newValue = value as FixupCollection<UserPayment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserPayments;
                    }
                }
            }
        }
        private ICollection<UserPayment> _userPayments;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;

        #endregion
        #region Association Fixup
    
        private void FixupAccountPlan(AccountPlan previousValue)
        {
            if (previousValue != null && previousValue.Accounts.Contains(this))
            {
                previousValue.Accounts.Remove(this);
            }
    
            if (AccountPlan != null)
            {
                if (!AccountPlan.Accounts.Contains(this))
                {
                    AccountPlan.Accounts.Add(this);
                }
                if (AccountPlanID != AccountPlan.AccountPlanID)
                {
                    AccountPlanID = AccountPlan.AccountPlanID;
                }
            }
        }
    
        private void FixupUserPayments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserPayment item in e.NewItems)
                {
                    item.Account = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserPayment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Account, this))
                    {
                        item.Account = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Accounts.Contains(this))
                    {
                        item.Accounts.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Accounts.Contains(this))
                    {
                        item.Accounts.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
