//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Insourcia.Psychotherapy.Model
{
    public partial class LongTermGoal
    {
        #region Primitive Properties
    
        public virtual int LongTermGoalID
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreateTime
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsValid
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastModifiedTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Objective> Objectives
        {
            get
            {
                if (_objectives == null)
                {
                    var newCollection = new FixupCollection<Objective>();
                    newCollection.CollectionChanged += FixupObjectives;
                    _objectives = newCollection;
                }
                return _objectives;
            }
            set
            {
                if (!ReferenceEquals(_objectives, value))
                {
                    var previousValue = _objectives as FixupCollection<Objective>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupObjectives;
                    }
                    _objectives = value;
                    var newValue = value as FixupCollection<Objective>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupObjectives;
                    }
                }
            }
        }
        private ICollection<Objective> _objectives;
    
        public virtual ICollection<Symptom> Symptoms
        {
            get
            {
                if (_symptoms == null)
                {
                    var newCollection = new FixupCollection<Symptom>();
                    newCollection.CollectionChanged += FixupSymptoms;
                    _symptoms = newCollection;
                }
                return _symptoms;
            }
            set
            {
                if (!ReferenceEquals(_symptoms, value))
                {
                    var previousValue = _symptoms as FixupCollection<Symptom>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSymptoms;
                    }
                    _symptoms = value;
                    var newValue = value as FixupCollection<Symptom>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSymptoms;
                    }
                }
            }
        }
        private ICollection<Symptom> _symptoms;

        #endregion
        #region Association Fixup
    
        private void FixupObjectives(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Objective item in e.NewItems)
                {
                    if (!item.LongTermGoals.Contains(this))
                    {
                        item.LongTermGoals.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Objective item in e.OldItems)
                {
                    if (item.LongTermGoals.Contains(this))
                    {
                        item.LongTermGoals.Remove(this);
                    }
                }
            }
        }
    
        private void FixupSymptoms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Symptom item in e.NewItems)
                {
                    if (!item.LongTermGoals.Contains(this))
                    {
                        item.LongTermGoals.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Symptom item in e.OldItems)
                {
                    if (item.LongTermGoals.Contains(this))
                    {
                        item.LongTermGoals.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
